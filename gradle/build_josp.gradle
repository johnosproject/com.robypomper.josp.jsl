/*******************************************************************************
 * The John Operating System Project is the collection of software and configurations
 * to generate IoT EcoSystem, like the John Operating System Platform one.
 * Copyright (C) 2021 Roberto Pompermaier
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 ******************************************************************************/


import com.robypomper.build.java.JavaPublicationUtils
import com.robypomper.build.java.JavaRunnableUtils
import com.robypomper.build.gradle.GradleBuildInfo

/**
 * Gradle configurations to manage JOD and JSL as java implementations.
 *
 * Components list:
 * <ul>
 *     <li>
 *         JOSP JSL
 *     </li>
 * </ul>
 *
 * Summary:
 * <ul>
 *     <li>
 *         Components configs: sourceSets, configurations, dependencies and BuildInfo
 *     </li>
 *     <li>
 *         Runners Tasks: task to run components as java application
 *     </li>
 *     <li>
 *         Runners Configs Tasks: task to run components as java application with different configurations
 *     </li>
 *     <li>
 *         Runners Discovery Tasks: task to run components as java application with different discovery systems
 *     </li>
 *     <li>
 *         Publication configs: component's publications
 *     </li>
 *     <li>
 *         Publication tasks: publication's tasks to local repository
 *     </li>
 * </ul>
 */


// ------------------
// Components configs
// ------------------

sourceSets {
    jospJSL {}
}

configurations {}

dependencies {
    jospJSLImplementation "com.robypomper.josp:jospCommons:${project.ext.get("version.deps.jospCommons")}"
    jospJSLImplementation "commons-cli:commons-cli:${project.ext.get("version.cli")}"
    jospJSLImplementation "com.googlecode.clichemaven:cliche:${project.ext.get("version.cliche")}"
    jospJSLRuntimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:${project.ext.get("version.apache.log4j")}"
    jospJSLRuntimeOnly "org.apache.logging.log4j:log4j-api:${project.ext.get("version.apache.log4j")}"
    jospJSLRuntimeOnly "org.apache.logging.log4j:log4j-core:${project.ext.get("version.apache.log4j")}"
}

GradleBuildInfo.makeBuildInfoForSourceSet(project, sourceSets.jospJSL, (String)project.ext.get("version.build.jospJSL"));

// -------------
// Runners Tasks
// -------------

// Utils: Make Java Runnable
def makeJSLJavaRunnable(String runnableName, String config_yml) {
    makeJSLJavaRunnable(runnableName, config_yml, null, true)
}
def makeJSLJavaRunnable(String runnableName, String config_yml, String group_name) {
    makeJSLJavaRunnable(runnableName, config_yml, group_name, true)
}
def makeJSLJavaRunnable(String runnableName, String config_yml, boolean overrideIfExist) {
    makeJSLJavaRunnable(runnableName, config_yml, null, overrideIfExist)
}
def makeJSLJavaRunnable(String runnableName, String config_yml, String group_name, boolean overrideIfExist) {
    runnableName = "JSL${runnableName}"
    String mainClass = 'com.robypomper.josp.jsl.JSLShell'
    File workingDir = file("envs/runnables/jsl/${runnableName}")

    JavaRunnableUtils.makeJavaFromSourceSet(project, sourceSets.jospJSL, mainClass, runnableName, workingDir)
    String jarTaskName = "java${runnableName}Run"

    tasks.getByName(jarTaskName) {
        group = group_name==null ? 'JOSP runners jsl' : "JOSP runners jsl ($group_name)"
        standardInput = System.in
        //args = ['--configs', 'src/jospJSL/configs/jsl_dev.yml']
        //jvmArgs = ['-Djavax.net.debug=ssl']
        jvmArgs = ['-Dlog4j.configurationFile=' + project.file('src/jospJSL/configs/log4j2/log4j2.xml').absolutePath]

        doFirst {
            if (workingDir.exists() && overrideIfExist)
                delete workingDir

            if (!workingDir.exists())
                copy {
                    from "src/jospJSL/configs/${config_yml}"
                    rename 'jsl(.+).yml', 'jsl.yml'
                    into workingDir
                }
        }
    }
}

makeJSLJavaRunnable('','jsl_default.yml',false)
makeJSLJavaRunnable('OnlyLocal','jsl_only-local.yml',false)
makeJSLJavaRunnable('OnlyCloud','jsl_only-cloud.yml',false)
makeJSLJavaRunnable('NoComm','jsl_no-comm.yml',false)
makeJSLJavaRunnable('Vanilla','jsl_default.yml')
makeJSLJavaRunnable('VanillaOnlyLocal','jsl_only-local.yml')
makeJSLJavaRunnable('VanillaOnlyCloud','jsl_only-cloud.yml')
makeJSLJavaRunnable('VanillaNoComm','jsl_no-comm.yml')
task javaJSL_Clean(type: Delete) {
    group 'JOSP cleaners'
    delete "envs/runnables/jsl/JSL"
}
clean.dependsOn javaJSL_Clean


// ---------------------
// Runners Configs Tasks
// ---------------------

/**
 * Usr    =>  unset   set   anonymous
 *            when set, check that set token is valid and not expired
 *
 * Configs (Usr, Off/Online)
 */
makeJSLJavaRunnable('uf','configs/jsl_uf.yml','Configs')
makeJSLJavaRunnable('un','configs/jsl_un.yml','Configs')
makeJSLJavaRunnable('sf','configs/jsl_sf.yml','Configs')
makeJSLJavaRunnable('sn','configs/jsl_sn.yml','Configs')


// -----------------------
// Runners Discovery Tasks
// -----------------------

/**
 * Usr    =>  unset   set   anonymous
 *            when set, check that set token is valid and not expired
 *
 * Configs (Usr, Off/Online)
 */
makeJSLJavaRunnable('Avahi','discovery/jsl_avahi.yml','Discovery')
makeJSLJavaRunnable('JmDNS','discovery/jsl_jmdns.yml','Discovery')
makeJSLJavaRunnable('DNSSD','discovery/jsl_dnssd.yml','Discovery')
makeJSLJavaRunnable('JmmDNS','discovery/jsl_jmmdns.yml','Discovery')


// -------------------
// Publication configs
// -------------------

String jospJSLName = 'JOSP Service Library'
String jospJSLArtifact = 'jospJSL'
String jospJSLVersion = project.ext.get("version.build.jospJSL")
String jospJSLDescription = "This is the JOSP JSL library from John O.S. Project"
def jospJSLPubDesc = new JavaPublicationUtils.Descriptor(project,sourceSets.jospJSL,jospJSLName,jospJSLArtifact,jospJSLVersion,jospJSLDescription)
        .setUrlsFromProject(project)
        .setLicenceGPLv3()
        .setExecutable()
        .setArtifactOpens()
        .setArtifactDistr()
JavaPublicationUtils.generatePublication(project,jospJSLPubDesc)
tasks.jospJSLDocs.enabled = !project.ext.get("disableDocs");

// -----------------
// Publication tasks
// -----------------

task jospJSL_PublishToLocal {
    description = 'Publish JOSP JSL component to local repository...'
    group = 'JOSP publishers (locals)'
    dependsOn publishJospJSLPublicationToMavenLocal
}
